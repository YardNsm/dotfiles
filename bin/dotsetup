#!/usr/bin/env bash

cd "$(dirname "${BASH_SOURCE[0]}")" \
  && source "../_setup/initializer.sh"

# ---------------------------------------------

run_install() {
  source "../install.sh" "$@"
}

run_topic() {
  install_specific_topic "$1"
}

list_topics() {
  print_title "Available topics"
  echo

  # shellcheck disable=SC2207
  local topics=( $(get_all_topics) )

  for topic in "${topics[@]}"; do
    echo -ne "    $(basename "$topic")\\n"
  done
}

# ---------------------------------------------

update_dotfiles() {

  cd "$DOTFILES" \
    || exit 1

  local -r CURRENT_COMMIT_HASH="$(git rev-parse --short HEAD)"

  print_title "Updating dotfiles"

  execute "git pull --rebase" \
    "Pull latest changes"

  execute "git submodule update --init --recursive --remote" \
    "Update submodules"

  # -----------------------------------

  if [[ -d "$DOTFILES_LOCAL" ]]; then
    print_title "Updating local dotfiles"

    cd "$DOTFILES_LOCAL" \
      || exit 1

    execute "git pull --rebase" \
      "Pull latest changes"

    execute "git submodule update --init --recursive --remote" \
      "Update submodules"
  fi

  # -----------------------------------

  print_title "Running updated topics"

  cd "$DOTFILES" \
    || exit 1

  local files_changed
  local topics_to_install_list
  local topics_to_install_array

  files_changed="$(git diff --name-only HEAD "$CURRENT_COMMIT_HASH")"

  # Get all of the changes topics
  while read -r filepath; do
    dirname="$(cut -d "/" -f1 <<< "$filepath")"

    if is_topic_exist "$dirname"; then
      topics_to_install_list+="$dirname\\n"
    fi
  done <<< "$files_changed"

  # Remove duplicates
  topics_to_install_list="$(echo -e "$topics_to_install_list" | uniq)"

  # Convert the list into array
  topics_to_install_array=( $topics_to_install_list )

  for topic in "${topics_to_install_array[@]}"; do
    install_specific_topic "$topic"
  done

  # -----------------------------------

  print_divider

  print_success "ðŸ¤˜  Done! Run \`reload\` in order to see full changes."
}

# ---------------------------------------------

print_help() {
  cat <<EOF

  Dotfiles maintenance

  Usage
    dotsetup <command> [options]

  Commands
    run [topic]             Run the installation file of [topic]
    install                 Run the installation script
    list                    List tasks
    update                  Fetch the latest version

  Options
    -h, --help              Show help output

  Options are being passed to the install script
  when running 'install' command.
EOF
}

# ---------------------------------------------

main() {
  declare -r CMD=$1
  shift

  case "$CMD" in
    run )
      run_topic "$@"
      exit 0
      ;;
    install )
      run_install "$@"
      exit 0
      ;;
    list )
      list_topics
      exit 0
      ;;
    update )
      update_dotfiles
      exit 0
      ;;
    "" | -h | --help)
      print_help
      exit 0
      ;;
    * )
      print_error "Unknown option $1";
      exit 1;
      ;;
  esac
}

main "$@"
