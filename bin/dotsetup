#!/usr/bin/env bash

# ---------------------------------------------

source "$DOTFILES/_setup/initializer.sh"

# ---------------------------------------------

[[ -z $DOTFILES ]] && \
  declare -r DOTFILES=$HOME/dotfiles

# ---------------------------------------------

run_install() {
  shift
  source "$DOTFILES/install.sh" "$@"
}

# ---------------------------------------------

run_install_local() {
  shift
  source "$DOTFILES_LOCAL/install.sh" "$@"
}

# ---------------------------------------------

run_topic() {
  declare -r topic_to_install=$1

  install_specific_topic "$topic_to_install"
}

# ---------------------------------------------

list_topics() {
  print_title "Available topics"
  echo

  local topics=( $(get_all_topics) )

  for topic in "${topics[@]}"; do
    echo -ne "  $(basename "$topic")\n"
  done
}

# ---------------------------------------------

list_tasks() {

  print_title "Getting ready"
  check_for_sudo

  local topics=( $(get_all_topics) )
  local options=()

  local os
  os=$(get_os)

  for topic in "${topics[@]}"; do
    if [[ -f $topic/install.sh ]] || [[ -f $topic/install-$os.sh ]]; then
      options+=( $(basename "$topic") )
    fi
  done

  PS3=$'\n  Choose a topic to install: '

  print_title "Available topics\n"

  select opt in "${options[@]}"; do
    case $opt in
      *)

        if [ -z $opt ]; then
          print_error "Unavailable topic"
          exit 1;
        fi

        install_specific_topic "$opt"
        exit 0
        ;;
    esac
  done
}

# ---------------------------------------------

_execute_directly() {
  eval "$1" &> /dev/null
  print_result $? "${2}"
}

update_dotfiles() {
  declare -r current_commit_hash="$(git rev-parse --short HEAD)"

  print_title "Updating dotfiles"

  _execute_directly "cd $DOTFILES || exit 1" \
    "Performing inside the dotfiles repo"

  _execute_directly "git pull --rebase" \
    "Pull latest changes"

  _execute_directly "git submodule update --init --recursive --remote" \
    "Update submodules"

  # -----------------------------------

  print_title "Updating local dotfiles"

  _execute_directly "cd $DOTFILES_LOCAL || exit 1" \
    "Performing inside the local dotfiles repo"

  _execute_directly "git pull --rebase" \
    "Pull latest changes"

  _execute_directly "git submodule update --init --recursive --remote" \
    "Update submodules"

  # -----------------------------------

  print_title "Running updated topics"

  cd "$DOTFILES"

  local files_changed="$(git diff --name-only HEAD "$current_commit_hash")"
  local topics_to_install=""

  while read -r filepath; do
    dirname="$(cut -d "/" -f1 <<< "$filepath")"

    if is_topic_exist "$dirname"; then
      topics_to_install+="$dirname\n"
    fi
  done <<< "$files_changed"

  topics_to_install="$(echo -e "$topics_to_install" | uniq)"
  topics_to_install=( $topics_to_install ) # don't ask.

  for topic in "${topics_to_install[@]}"; do
    install_specific_topic "$topic"
  done

  # -----------------------------------

  print_divider

  print_success "ðŸ¤˜  Done! Run \`reload\` in order to see full changes."
}

# ---------------------------------------------

print_help() {
  cat <<EOF

  Dotfiles maintenance

  Usage
    dotsetup <command> [options]

  Commands
    run [topic]             Run [topic] installation file
    install                 Run the install script
    install-local           Run the local dotfiles installation script
    list                    List tasks
    tasks                   List and run tasks
    update                  Fetch the latest version

  Options
    -h, --help              Show help output

  Options are being passed to the install script
  when running 'install' command.
EOF
}

# ---------------------------------------------

main() {
  declare -r cmd=$1
  shift

  case "$cmd" in
    run )
      run_topic "$@"
      exit 0
      ;;
    install )
      run_install "$@"
      exit 0
      ;;
    install-local )
      run_install_local "$@"
      exit 0
      ;;
    list )
      list_topics
      exit 0
      ;;
    tasks )
      list_tasks
      exit 0
      ;;
    update )
      update_dotfiles
      exit 0
      ;;
    "" | -h | --help)
      print_help
      exit 0
      ;;
    * )
      print_error "Unknown option $1";
      exit 1;
      ;;
  esac
}

main "$@"
